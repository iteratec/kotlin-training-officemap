#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>

const String seat = "8";
const char* ssid = "iteraWLAN"; //SSID des WLANs
const char* password = "!1996iteraWLAN#"; //Password des WLANS
IPAddress ownIp(192, 168, 4, 253); // IP of the NodeMCU
IPAddress gatewayIp(192, 168, 4, 1); // IP of the Gateway (Router)
IPAddress subnet(255, 255, 255, 0); // Subnet Mask
const String host = "jsonplaceholder.typicode.com/users/1";
const char* port = "8080";
const String methodCall = "/allreservations";

String mac;
boolean reserved;
int  buttonState;
String status;
int counter;
void setup()
{
  pinMode(1, INPUT);
  pinMode(0, OUTPUT);
  pinMode(2, OUTPUT);
  Serial.begin(115200);
  connectToWiFi();
  blinkNShow(checkStatus());
  counter = 0;



}

void loop()
{
  refresh();
  buttonState = digitalRead(1);
  if (buttonState != 0) {
    if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
      Serial.println("Sending Request");

      String status = checkStatus();
      if (status == "FREE")
      {
        reserveAdhoc();
        blinkNShow(checkStatus());
      }
      else if (status == "ADHOC")
      {
        removeAdhoc();
        blinkNShow(checkStatus());
      }
      else if (status == "NORMALRESERVATION")
      {
         blinkNShow(checkStatus());
      }
    }
  else
  {
    Serial.println("no connection");
    connectToWiFi();
   }

  }
}


void connectToWiFi() {

  Serial.print("Verbinde mich mit Netz: ");
  Serial.println(ssid);
  WiFi.config(ownIp, gatewayIp, subnet);
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(50);
    Serial.print(".");
  }
  Serial.println("connected TO Wifi");

  mac = WiFi.macAddress();
  Serial.print("MAC: ");
  Serial.println(mac);


}




void removeAdhoc() {
  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
    HTTPClient http;
    http.begin("http://192.168.4.36:8080/removeadhoc");  //Specify request destination
    http.addHeader("Content-Type", "application/json");
    int responseCode = http.sendRequest("DELETE", mac);
    Serial.println(responseCode);
    if (responseCode == 200) {
      Serial.println("removed successfully");
    }
    http.end();
    blinkNShow(checkStatus());
  }
  else {
    Serial.println("no connection");
    connectToWiFi();

  }
}
void reserveAdhoc() {
  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
    Serial.println("Sending Request");

    HTTPClient http;  //Declare an object of class HTTPClient

    http.begin("http://192.168.4.36:8080/reserveadhoc");  //Specify request destination
    http.addHeader("Content-Type", "application/json");
    int responseCode = http.POST(mac);     //Send the request

    Serial.println(responseCode);

    if (responseCode > 0) { //Check the returning code
      String payload = http.getString();   //Get the request response payload
      Serial.println(payload);                     //Print the response payload
    }
    if (responseCode == 200) {
      Serial.println("reserved successfully");
    }

    http.end();   //Close connection
    blinkNShow(checkStatus());
  }

  else {
    Serial.println("no connection");
    connectToWiFi();
  }


}

String checkStatus() {
  if (WiFi.status() == WL_CONNECTED) { //Check WiFi connection status
    Serial.println("Sending Request");

    HTTPClient http;  //Declare an object of class HTTPClient
    String parsedMac = mac;
    parsedMac.replace(":","%3A");
    Serial.println(parsedMac);
    String url = "http://192.168.4.36:8080/getstatus?macAddress=";
    url = url + parsedMac;
    http.begin(url); //Specify request destination
    http.addHeader("Content-Type", "application/json");
    int responseCode = http.sendRequest("GET");                      //Send the request
    Serial.println(responseCode);
    String payload = http.getString();
    Serial.println(payload);
    return payload;
  }
  else {
    connectToWiFi();
    Serial.println("no connection");
  }

}

//checks the status after every 3 mins n changes the lights accordingly
void refresh(){
  if(counter > 60000){
    blinkNShow(checkStatus());
    counter = 0;
  }
  else{
    counter = counter + 1;
    delay(3);
  }
}

//checks the status , blinks lights n shows the lights according to final status
void blinkNShow(String status) {
  if (status == "FREE") {
    blink(500, 2);
    digitalWrite(2, HIGH);
    digitalWrite(0, LOW);
  }
  else if (status == "ADHOC") {
    blink(500, 2);
    digitalWrite(0, HIGH);
    digitalWrite(2, LOW);
  }
  else if (status == "NORMALRESERVATION") {
    blink(100, 10);
    digitalWrite(0, LOW);
    digitalWrite(2, LOW);
  }




}

void blink(int dur, int count) {
  int i = 0;
  while (i < count) {
    digitalWrite(0, HIGH);
    digitalWrite(2, HIGH);
    delay(dur);
    digitalWrite(0, LOW);
    digitalWrite(2, LOW);
    delay(dur);
    i = i + 1;
  }
}





